;; -*- lisp -*-

;;;; 基本环境设置
(setenv "HOME" "d:/Emacs/")
;; (setenv "PATH" (concat (getenv "PATH") ""))
(setq default-directory "~/") ;; 设置默认访问目录
;; 设置默认字符编码
(setq default-buffer-file-coding-system 'utf-8)
(prefer-coding-system 'utf-8)

;; 设置英文字体
(set-face-attribute
 'default nil :font "Inconsolata 12")
;; 设置方块字字体
(dolist (charset '(kana han symbol cjk-misc bopomofo))
    (set-fontset-font (frame-parameter nil 'font)
                      charset
                      (font-spec :family "Microsoft YaHei" :size 16)))

(tool-bar-mode -1) ;; 不显示工具栏和滚动条
;; (menu-bar-mode nil)
(scroll-bar-mode -1)
(setq inhibit-startup-message t) ;; 不显示欢迎界面
(setq-default make-backup-files nil) ;; 不生成临时文件
(transient-mark-mode t) ;; 反显选中区域
(global-linum-mode t) ;;;; 全局显示行号
;; (global-set-key [C-tab] 'other-window) ;;;; 自定义全局快捷键

;;;; iimage mode
(autoload 'iimage-mode "iimage" "Support Inline image minor mode." t)
(autoload 'turn-on-iimage-mode "iimage" "Turn on Inline image minor mode." t)
(defun org-toggle-iimage-in-org ()
  "display images in your org file"
  (interactive)
  (if (face-underline-p 'org-link)
      (set-face-underline-p 'org-link nil)
      (set-face-underline-p 'org-link t))
  (iimage-mode))

;;;; ido-mode
(ido-mode t)
(setq ido-everywhere t)
(setq ido-enable-flex-matching t)
(setq ido-enable-last-directory-history nil)

;;;; tramp
(setq tramp-default-method "plink")

;;;; ELPA
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                         ;; ("marmalade" . "http://marmalade-repo.org/packages/")
                         ("melpa" . "http://melpa.milkbox.net/packages/")))

(setq package-enable-at-startup nil)
(package-initialize)

(defvar my-default-packages '(ac-cider
			      auto-complete
			      cider
			      clojure-mode
			      monokai-theme
			      paredit
			      rainbow-delimiters
			      yasnippet))

(dolist (p my-default-packages)
  (when (not (package-installed-p p))
    (package-install p)))

;;;; monokai theme
(load-theme 'flatland t)
(load-theme 'monokai t)

;;;; cider-mode
(require 'cider)
(setq nrepl-hide-special-buffers t)
(setq cider-repl-use-clojure-font-lock t)
;;Stop the error buffer from popping up while working in buffers other than the REPL
(setq cider-popup-stacktraces nil)

;;  (defun cider-eval-last-sexp-and-append ()
;;    "Evaluate the expression preceding point and append result."
;;    (interactive)
;;    (let* ((last-sexp (if (region-active-p)
;;  			(buffer-substring (region-beginning) (region-end))
;;  		      (cider-last-sexp)))
;;           (last-results (cider-eval-and-get-value last-sexp)))
;;      (with-current-buffer (current-buffer)
;;        (comment-indent)
;;        (insert " => ")
;;        (insert (prin1-to-string last-results)))))

(defun cider-send-and-evaluate-sexp ()
  "Sends the s-expression located before the point or the active
region to the REPL and evaluates it. Then the Clojure buffer is
activated as if nothing happened."
  (interactive)
  (if (not (region-active-p))
      (cider-insert-last-sexp-in-repl)
    (cider-insert-in-repl
     (buffer-substring (region-beginning) (region-end)) nil))
  (cider-switch-to-repl-buffer)
  (cider-repl-closing-return)
  (cider-switch-to-last-clojure-buffer)
  (message ""))

(add-hook 'clojure-mode-hook
	  (lambda ()
	    (local-set-key (kbd "C-c C-v") 'cider-send-and-evaluate-sexp)
	    ;; (local-set-key (kbd "C-c C-s") 'cider-eval-last-sexp-and-append)
	    ))

;;;; eldoc-mode
(add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
(add-hook 'clojure-mode-hook 'turn-on-eldoc-mode)
;; (add-hook 'cider-mode-hook 'cider-turn-on-eldoc-mode)

;;;; paredit-mode
(autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
(add-hook 'emacs-lisp-mode-hook #'enable-paredit-mode)
(add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
;; (add-hook 'ielm-mode-hook #'enable-paredit-mode)
(add-hook 'lisp-mode-hook #'enable-paredit-mode)
(add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
(add-hook 'scheme-mode-hook #'enable-paredit-mode)
(add-hook 'clojure-mode-hook #'enable-paredit-mode)
(add-hook 'cider-repl-mode-hook #'enable-paredit-mode)

;;;; rainbow-delimiters
(global-rainbow-delimiters-mode)

;;;; yasnippet
(setq yas-snippet-dirs
      '("~/.emacs.d/snippets"))

(yas-global-mode t)

;;;; auto-complete
(require 'auto-complete-config)
(setq ac-delay 0.0)
(setq ac-quick-help-delay 0.5)
;; (setq ac-dwim t)
(setq ac-quick-help-prefer-pos-tip t)
(setq ac-trigger-commands
      (cons 'backward-delete-char-untabify ac-trigger-commands))
(set-default 'ac-sources
             '(ac-source-yasnippet
	       ac-source-abbrev
               ac-source-dictionary
               ac-source-words-in-buffer
               ac-source-words-in-same-mode-buffers
	       ac-source-symbols
	       ac-source-variables
	       ac-source-imenu
	       ac-source-functions
	       ac-source-features
	       ac-source-emacs-lisp-features
               ;; ac-source-semantic
	       ))

(add-to-list 'ac-dictionary-directories "~/.emacs.d/db/ac-dict")
(ac-config-default)
(global-auto-complete-mode t)

;;  ;; keymap
;;  (setq ac-use-menu-map t)
;;  (define-key ac-complete-mode-map (kbd "<return>") nil)
;;  (define-key ac-complete-mode-map (kbd "RET") nil)
;;  (define-key ac-complete-mode-map (kbd "\M-j") 'ac-complete)
;;  (define-key ac-complete-mode-map (kbd "\M-n") 'ac-next)
;;  (define-key ac-complete-mode-map (kbd "\M-p") 'ac-previous)

;; ac-cider
(require 'ac-cider)
(add-hook 'cider-mode-hook 'ac-flyspell-workaround)
(add-hook 'cider-mode-hook 'ac-cider-setup)
(add-hook 'cider-repl-mode-hook 'ac-cider-setup)
(eval-after-load "auto-complete"
  '(progn
     (add-to-list 'ac-modes 'cider-mode)
     (add-to-list 'ac-modes 'cider-repl-mode)))

;;;; clojure-color-scheme
;;  (defmacro defclojureface (name color desc &optional others)
;;    `(defface ,name '((((class color)) (:foreground ,color ,@others))) ,desc :group 'faces))
;;  
;;  (defclojureface clojure-parens       "DimGrey"   "Clojure parens")
;;  (defclojureface clojure-braces       "#49b2c7"   "Clojure braces")
;;  (defclojureface clojure-brackets     "SteelBlue" "Clojure brackets")
;;  (defclojureface clojure-keyword      "khaki"     "Clojure keywords")
;;  (defclojureface clojure-namespace    "#c476f1"   "Clojure namespace")
;;  (defclojureface clojure-java-call    "#4bcf68"   "Clojure Java calls")
;;  (defclojureface clojure-special      "#b8bb00"   "Clojure special")
;;  (defclojureface clojure-double-quote "#b8bb00"   "Clojure special" (:background "unspecified"))
;;  
;;  (defun tweak-clojure-syntax ()
;;    (mapcar (lambda (x) (font-lock-add-keywords nil x))
;;            '((("#?['`]*(\\|)"       . 'clojure-parens))
;;              (("#?\\^?{\\|}"        . 'clojure-brackets))
;;              (("\\[\\|\\]"          . 'clojure-braces))
;;              ((":\\w+"              . 'clojure-keyword))
;;              (("#?\""               0 'clojure-double-quote prepend))
;;              (("nil\\|true\\|false\\|%[1-9]?" . 'clojure-special))
;;              (("(\\(\\.[^ \n)]*\\|[^ \n)]+\\.\\|new\\)\\([ )\n]\\|$\\)" 1 'clojure-java-call))
;;              )))
;;  
;;  (add-hook 'clojure-mode-hook 'tweak-clojure-syntax)
;;  (add-hook 'cider-repl-mode-hook 'tweak-clojure-syntax)
