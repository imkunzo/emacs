;; -*- lisp -*-

;;;; 基本环境设置
;; (setenv "HOME" "~")
;; (setenv "PATH" (concat (getenv "PATH")
;; 		       ";d:/Opt/Cygwin/bin;d:/Opt/PuTTY"))

;; 设置默认访问目录
(setq default-directory "~/")

;; 设置默认字符编码
(setq default-buffer-file-coding-system 'utf-8)
(prefer-coding-system 'utf-8)

;; 设置英文字体
(set-face-attribute
 'default nil :font "DejaVu Sans Mono 10")
;; 设置方块字字体
(dolist (charset '(kana han symbol cjk-misc bopomofo))
    (set-fontset-font (frame-parameter nil 'font)
                      charset
                      (font-spec :family "Microsoft YaHei" :size 16)))

;; 不显示工具栏和滚动条
(tool-bar-mode -1)
;; (menu-bar-mode nil)
(scroll-bar-mode -1)
;; 不显示欢迎界面
(setq inhibit-startup-message t)
;; 不生成临时文件
(setq-default make-backup-files nil)
;; 反显选中区域
(transient-mark-mode t)

;;;; 全局显示行号
(global-linum-mode t)

;;;; 自定义全局快捷键
;; (global-set-key [C-tab] 'other-window)


;;;; iimage mode
(autoload 'iimage-mode "iimage" "Support Inline image minor mode." t)
(autoload 'turn-on-iimage-mode "iimage" "Turn on Inline image minor mode." t)
(defun org-toggle-iimage-in-org ()
  "display images in your org file"
  (interactive)
  (if (face-underline-p 'org-link)
      (set-face-underline-p 'org-link nil)
      (set-face-underline-p 'org-link t))
  (iimage-mode))

;;;; ido-mode
(ido-mode t)
(setq ido-everywhere t)
(setq ido-enable-flex-matching t)
(setq ido-enable-last-directory-history nil)

;;;; tramp设置
(setq tramp-default-method "plink")

;;;; ELPA设置
(require 'package)
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                         ("marmalade" . "http://marmalade-repo.org/packages/")
                         ("melpa" . "http://melpa.milkbox.net/packages/")
			 ("org" . "http://orgmode.org/elpa/")))

(package-initialize)

(when (not package-archive-contents)
  (package-refresh-contents))

(defvar my-packages '(monokai-theme
		      smartparens
		      highlight-parentheses
		      mic-paren
		      paredit
		      yasnippet
		      slime
		      auto-complete
		      ac-slime
					;clojure-mode
					;nrepl
		      ))

(dolist (p my-packages)
  (when (not (package-installed-p p))
    (package-install p)))

;;;; 设置主题
(load-theme 'monokai t)

;;;; 括号的自动匹配和高亮显示
;; smartparens
(smartparens-global-mode t)
(sp-pair "'" nil :actions :rem)
(sp-pair "`" nil :actions :rem)
;; highlight-parentheses
(setq hl-paren-colors
      '("Red" "DeepSkyBlue" "Yellow" "Lime" "Magenta"))
(define-global-minor-mode global-highlight-parentheses-mode
  highlight-parentheses-mode
  (lambda ()
    (highlight-parentheses-mode t)))

(global-highlight-parentheses-mode t)
;; mic-paren
(paren-activate)
(setq paren-dont-touch-blink t)
(setq paren-match-face 'highlight)
(setq paren-sexp-mode nil)
;; paredit-mode
(autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code" t)
(add-hook 'emacs-lisp-mode-hook #'enable-paredit-mode)
(add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
(add-hook 'ielm-mode-hook #'enable-paredit-mode)
(add-hook 'lisp-mode-hook #'enable-paredit-mode)
(add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
(add-hook 'scheme-mode-hook #'enable-paredit-mode)
(add-hook 'clojure-mode-hook #'enable-paredit-mode)
(add-hook 'slime-repl-mode-hook (lambda () (paredit-mode +1)))
(defun override-slime-repl-bindings-with-paredit ()
  (define-key slime-repl-mode-map
      (read-kbd-macro paredit-backward-delete-key) nil))
(add-hook 'slime-repl-mode-hook 'override-slime-repl-bindings-with-paredit)

;;    ;;;; cedet
;;    (load-file "~/.emacs.d/plugins/cedet-1.1/common/cedet.el")
;;    (require 'semantic/ia)
;;    (setq semanticdb-default-save-directory
;;          (expand-file-name "~/.emacs.d/db/semanticdb"))
;;    
;;    (setq semantic-default-submodes
;;          '(
;;    	global-semanticdb-minor-mode
;;    	global-semantic-highlight-edits-mode
;;    	global-semantic-idle-local-symbol-highlight-mode
;;    ;;	global-cedet-m3-minor-mode
;;    	;; code helpers
;;    	global-semantic-idle-scheduler-mode
;;    	global-semantic-idle-summary-mode
;;    	global-semantic-idle-completions-mode
;;    	;; eye candy
;;    	global-semantic-decoration-mode
;;    	global-semantic-highlight-func-mode
;;    	global-semantic-highlight-edits-mode
;;    	global-semantic-stickyfunc-mode
;;    	;; debugging semantic itself
;;    	global-semantic-show-parser-state-mode t
;;    	global-semantic-show-unmatched-syntax-mode t
;;    	))
;;    (semantic-mode t)
;;    
;;    (global-ede-mode t)

;;;; yasnippet
(setq yas-snippet-dirs
      '("~/.emacs.d/snippets" ;; personal snippets
	"~/.emacs.d/elpa/yasnippet-20140511.947/snippets"
	))
(yas-global-mode t)

;;;; org
(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
(add-hook 'org-mode-hook 'turn-on-font-lock)
(add-hook 'org-mode-hook (lambda () (setq truncate-lines nil)))

;; fix some org-mode + yasnippet conflicts:
(defun yas/org-very-safe-expand ()
  (let ((yas/fallback-behavior 'return-nil)) (yas/expand)))

(add-hook 'org-mode-hook
          (lambda ()
            (make-variable-buffer-local 'yas/trigger-key)
            (setq yas/trigger-key [tab])
            (add-to-list 'org-tab-first-hook 'yas/org-very-safe-expand)
            (define-key yas/keymap [tab] 'yas/next-field)))

(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)

;;;; 设置slime
(setq inferior-lisp-program "d:/Opt/SBCL/sbcl.exe")
(setq slime-net-coding-system 'utf-8-unix)
(require 'slime-autoloads)
(slime-setup '(slime-fancy))

(add-hook 'slime-load-hook 
	  #'(lambda ()
	      (define-key 'slime-prefix-map (kbd "M-h") 'slime-documentation-lookup)))

;;;; auto-complete
(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories "~/.emacs.d/db/ac-dict")
;; (require 'auto-complete+)
(ac-config-default)
(global-auto-complete-mode t)

(setq ac-quick-help-prefer-pos-tip t)

;; keymap
(setq ac-use-menu-map t)
(define-key ac-complete-mode-map (kbd "<return>") nil)
(define-key ac-complete-mode-map (kbd "RET") nil)
(define-key ac-complete-mode-map (kbd "\M-j") 'ac-complete)
(define-key ac-complete-mode-map (kbd "\M-n") 'ac-next)
(define-key ac-complete-mode-map (kbd "\M-p") 'ac-previous)

;;    ;; auto-complete semantic
;;    (defun ac-semantic-construct-candidates (tags)
;;       "Construct candidates from the list inside of tags."
;;       (apply 'append
;;    	  (mapcar (lambda (tag)
;;    		    (if (listp tag)
;;    			(let ((type (semantic-tag-type tag))
;;    			      (class (semantic-tag-class tag))
;;    			      (name (semantic-tag-name tag)))
;;    			  (if (or (and (stringp type)
;;    				       (string= type "class"))
;;    				  (eq class 'function)
;;    				  (eq class 'variable))
;;    			      (list (list name type class))))))
;;    		  tags)))
;;    
;;    
;;    (defvar ac-source-semantic-analysis nil)
;;    (setq ac-source-semantic
;;      `((sigil . "b")
;;        (init . (lambda () 
;;    	      (setq ac-source-semantic-analysis
;;    		    (condition-case nil
;;    			(ac-semantic-construct-candidates (semantic-fetch-tags))))))
;;        (candidates . (lambda ()
;;                        (if ac-source-semantic-analysis
;;                            (all-completions ac-target (mapcar 'car ac-source-semantic-analysis)))))))

;; auto-complete slime
(require 'ac-slime)
(add-hook 'slime-mode-hook 'set-up-slime-ac)
(add-hook 'slime-repl-mode-hook 'set-up-slime-ac)
(eval-after-load "auto-complete"
  '(add-to-list 'ac-modes 'slime-repl-mode))
